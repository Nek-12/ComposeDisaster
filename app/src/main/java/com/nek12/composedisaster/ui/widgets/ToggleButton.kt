package com.nek12.composedisaster.ui.widgets

import androidx.compose.animation.animateColorAsState
import androidx.compose.foundation.layout.RowScope
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.ButtonElevation
import androidx.compose.material3.LocalContentColor
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.material3.contentColorFor
import androidx.compose.ui.Modifier
import androidx.compose.runtime.Composable
import androidx.compose.runtime.CompositionLocalProvider
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.tooling.preview.PreviewParameter
import androidx.compose.ui.tooling.preview.datasource.CollectionPreviewParameterProvider
import com.nek12.composedisaster.ui.theme.ComposeDisasterTheme

@Composable
fun BadToggleButton(
    // ❌ invalid parameter order
    // ❌ dangerous default parameter
    // ❌ unneeded lambda param - parent composable can know about the toggled state (see below)
    onToggle: (Boolean) -> Unit = { },
    text: String, // ❌ Not customizable - does not use slot API
    // ❌no Modifier parameter
    // ❌ not customizable - does not surface underlying composables' params
) {
    // ❌ state not hoisted - composable became stateful
    var toggled by remember { mutableStateOf(false) }

    // ❌ transition not animated - will be abrupt and non-performant
    // ❌ Hardcodes specific material colors and theme - not customizable
    val color = if (toggled) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.surface

    Button(
        onClick = {
            onToggle(toggled) // ❌ unclear if this is an old or new value, many object creations
            toggled = !toggled // ❌ hardcoded logic
        },
        colors = ButtonDefaults.buttonColors(containerColor = color)
    ) {
        Text(text = text)
    }
}

@Composable
fun ToggleButton(
    // ✅ state is hoisted
    toggled: Boolean,
    // ✅ reusable easy lambda
    onClick: () -> Unit,
    // ✅ modifier parameter is the first optional parameter except for content
    modifier: Modifier = Modifier,
    // ✅ customizable params with default values
    toggledColor: Color = MaterialTheme.colorScheme.primary,
    color: Color = MaterialTheme.colorScheme.surface,
    elevation: ButtonElevation = ButtonDefaults.elevatedButtonElevation(),
    // ✅ content slot is the last parameter
    content: @Composable RowScope.() -> Unit,
) {

    // ✅ animated color
    val targetColor by animateColorAsState(if (toggled) toggledColor else color, label = "button color")

    Button(
        modifier = modifier, // ⚠️ pass modifier to topmost composable only
        onClick = onClick, // lambda is reused
        elevation = elevation,
        colors = ButtonDefaults.buttonColors(containerColor = targetColor),
    ) {
        CompositionLocalProvider(LocalContentColor provides contentColorFor(color)) {
            content()
        }
    }
}


@Composable
@Preview(name = "BadToggleButton")
private fun BadToggleButtonPreview() = ComposeDisasterTheme {
    BadToggleButton(text = "Text") // wait, we did not even specify the onClick lambda?
}

private class BooleanProvider : CollectionPreviewParameterProvider<Boolean>(listOf(true, false))

@Preview
@Composable
private fun ToggleButtonPreview(
    @PreviewParameter(BooleanProvider::class) toggled: Boolean, // ✅ autogenerated easy previews
) = ComposeDisasterTheme {

    ToggleButton(
        toggled = toggled,
        onClick = {},
    ) {
        Text("MyContent")
    }
}
